# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  37 ', 'LYS', 0.0, (-25.387, 5.362, 10.391))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.24111308807455933, (-14.794, 17.084, -3.933)), ('A', '  36 ', 'MET', 0.16645812899453272, (-21.95799999999999, 5.107, 8.862))]
data['cbeta'] = []
data['probe'] = [(' A  33  ILE HD13', ' A  95  VAL HG13', -1.065, (-14.117, 13.167, 1.879)), (' A 159  MET  HE1', ' A 168  LYS  HE3', -0.966, (-40.502, 9.781, 14.284)), (' A 159  MET  HE3', ' A 168  LYS  HG3', -0.786, (-38.29, 10.848, 12.87)), (' A 130  ILE HD11', ' A 169  VAL HG11', -0.77, (-32.947, 16.673, 13.951)), (' A 159  MET  HE3', ' A 168  LYS  CG ', -0.763, (-38.383, 10.779, 12.691)), (' A 159  MET  HE1', ' A 168  LYS  CE ', -0.749, (-40.204, 9.951, 13.601)), (' A  32  LEU HD13', ' A  46 BLEU HD23', -0.721, (-22.449, 15.511, -0.385)), (' A 170  ILE  CD1', ' A 172  ASN  ND2', -0.712, (-36.893, 10.35, 19.409)), (' A  48  ARG  O  ', ' A  51  GLU  CG ', -0.704, (-28.766, 16.149, -7.804)), (' A  29  ASN HD22', ' A 122  LYS  NZ ', -0.699, (-8.986, 20.433, -5.661)), (' A 130  ILE  CD1', ' A 169  VAL HG11', -0.686, (-32.569, 16.007, 14.427)), (' A  38  ARG  HB3', ' A 160  LEU HD12', -0.663, (-29.419, 8.973, 8.177)), (' A 159  MET  CE ', ' A 168  LYS  HG3', -0.661, (-38.3, 10.991, 13.615)), (' A 130  ILE HD13', ' A 156  VAL HG11', -0.655, (-31.066, 15.659, 15.792)), (' A  65  ILE  O  ', ' A  65  ILE HD12', -0.619, (-16.792, 4.69, 14.982)), (' A  47  ALA  CB ', ' A  60  ILE HD11', -0.617, (-23.539, 12.278, -4.547)), (' A  27  ILE  HA ', ' A  30 ALEU HD13', -0.598, (-15.909, 20.847, -5.37)), (' A  18  HIS  CE1', ' A  22  GLU  OE2', -0.587, (-25.333, 30.435, -3.794)), (' A  20  ILE  CD1', ' A  46 BLEU HD21', -0.582, (-22.225, 18.314, 0.318)), (' A  17  SER  HA ', ' A  46 BLEU HD11', -0.574, (-24.655, 19.577, -0.729)), (' A  44  ASN  OD1', ' A  60  ILE HG21', -0.572, (-23.768, 8.294, -0.667)), (' A 170  ILE  CD1', ' A 172  ASN HD22', -0.57, (-37.49, 10.552, 20.247)), (' A  32  LEU  C  ', ' A  33  ILE HD12', -0.55, (-17.231, 11.592, 0.63)), (' A  30 BLEU HD21', ' A  32  LEU HD23', -0.541, (-18.6, 16.281, -1.457)), (' A 130  ILE HD11', ' A 169  VAL  CG1', -0.533, (-32.856, 15.913, 13.917)), (' A  20  ILE HD13', ' A  46 BLEU HD21', -0.525, (-21.814, 18.063, 0.346)), (' A 170  ILE HD11', ' A 172  ASN  ND2', -0.519, (-36.712, 10.093, 19.335)), (' A  20  ILE HD12', ' A  46 BLEU HD11', -0.51, (-23.421, 19.857, 0.128)), (' A 131  ASP  HB3', ' A 147  ASN HD22', -0.504, (-25.987, 23.698, 15.152)), (' A  29  ASN HD22', ' A 122  LYS  HZ3', -0.502, (-8.474, 21.293, -5.277)), (' A 159  MET  CE ', ' A 168  LYS  CG ', -0.501, (-39.039, 10.696, 13.37)), (' A  29  ASN HD22', ' A 122  LYS  HZ2', -0.497, (-8.617, 20.078, -5.33)), (' A  30 BLEU HD21', ' A  32  LEU  CD2', -0.491, (-18.959, 16.55, -1.656)), (' A  30 BLEU HD23', ' A  31  VAL  N  ', -0.487, (-16.122, 15.5, -2.926)), (' A 159  MET  HE3', ' A 168  LYS  HG2', -0.472, (-38.862, 10.93, 12.199)), (' A   3 BILE HG22', ' A   4  MET  HG3', -0.453, (-35.363, 19.904, 13.639)), (' A 130  ILE HD12', ' A 158  VAL  CG2', -0.45, (-30.738, 15.093, 13.582)), (' A  31  VAL HG23', ' A  33  ILE  CD1', -0.446, (-14.781, 12.622, 0.224)), (' A   3 BILE HG12', ' A 171  ILE HG13', -0.442, (-36.399, 18.111, 18.735)), (' A  24  ASN  HB3', ' A  30 ALEU HD11', -0.441, (-15.132, 22.327, -3.731)), (' A  37  LYS  HG2', ' A  38  ARG HH11', -0.437, (-27.985, 6.097, 12.498)), (' A 130  ILE HD13', ' A 156  VAL  CG1', -0.436, (-31.324, 15.657, 15.792)), (' A   3 BILE HG13', ' A 171  ILE HD11', -0.434, (-35.287, 19.561, 18.863)), (' A  51  GLU  HB3', ' A  57  ARG  CG ', -0.433, (-25.294, 14.249, -8.89)), (' A  29  ASN  N  ', ' A  29  ASN  OD1', -0.43, (-12.389, 19.34, -6.663)), (' A  18  HIS  CE1', ' A  22  GLU  CD ', -0.429, (-24.798, 30.225, -3.101)), (' A  30 BLEU  C  ', ' A  30 BLEU HD23', -0.426, (-16.202, 15.768, -3.398)), (' A  33  ILE  N  ', ' A  33  ILE HD12', -0.418, (-17.148, 11.939, 1.633)), (' A  37  LYS  HG2', ' A  38  ARG  HG3', -0.417, (-27.983, 6.767, 11.463)), (' A  17  SER  HA ', ' A  46 BLEU  CD1', -0.413, (-24.913, 19.546, -0.73)), (' A  31  VAL HG23', ' A  33  ILE HD11', -0.412, (-14.458, 11.914, 0.264)), (' A  51  GLU  HB3', ' A  57  ARG  HG2', -0.406, (-25.553, 14.343, -8.403)), (' A  24  ASN  ND2', ' A  30 ALEU HD21', -0.405, (-16.944, 21.434, -1.834)), (' A 170  ILE HD13', ' A 172  ASN HD22', -0.401, (-37.698, 10.792, 19.887))]
handle_read_draw_probe_dots_unformatted("apo_mpd-ds2_molprobity_4_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
