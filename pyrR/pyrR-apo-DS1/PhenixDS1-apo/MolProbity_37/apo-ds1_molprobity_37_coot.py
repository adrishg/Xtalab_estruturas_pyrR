# script auto-generated by phenix.molprobity


from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None) :
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  39 ', 'ARG', 0.0005507882483043513, (-23.811, -16.354, -16.731)), ('B', '  39 ', 'ARG', 0.002780840077711409, (-47.815999999999995, 15.866999999999999, -5.103)), ('C', '  39 ', 'ARG', 0.0, (-11.73, 6.377, 27.101000000000006))]
data['omega'] = []
data['rota'] = [('A', '  48 ', 'LEU', 0.027161386667558983, (-31.693999999999996, -22.964999999999993, -5.461)), ('A', '  73 ', 'ASP', 0.11053794898676624, (-23.147999999999993, -5.642999999999998, -25.867)), ('A', '  75 ', 'THR', 0.036460476392985205, (-23.236999999999995, -12.559999999999997, -27.837000000000007)), ('A', '  76 ', 'THR', 0.23775035194463362, (-25.706, -12.655, -30.781)), ('A', '  78 ', 'LEU', 0.1236296009088386, (-29.09199999999999, -10.124999999999996, -34.719)), ('B', '   1 ', 'TYR', 0.01682934936711636, (-53.298, 1.94, 19.348)), ('B', '  34 ', 'LEU', 0.15817388935247817, (-33.53899999999999, 16.436, -5.225)), ('B', '  48 ', 'LEU', 0.12626021874804091, (-35.191, 18.64, 2.947)), ('B', '  91 ', 'ASP', 0.21850625488598802, (-30.591, 18.33, -15.142000000000003)), ('B', ' 154 ', 'LYS', 0.00173753061152293, (-53.097, -4.463, 3.204000000000001)), ('B', ' 172 ', 'ILE', 0.1284283244650231, (-52.387, 8.987, 9.846000000000004)), ('C', '   2 ', 'LYS', 0.044628097188645764, (-3.0089999999999995, 2.0739999999999994, 7.631000000000002)), ('C', '  34 ', 'LEU', 0.10919750320574714, (-25.71, 10.290999999999997, 28.287000000000006)), ('C', ' 120 ', 'LEU', 0.154015720814495, (-26.649, 1.6059999999999997, 40.068)), ('D', '  88 ', 'ILE', 0.13507243463665883, (-26.724999999999987, -25.95499999999999, 33.083))]
data['cbeta'] = [('A', '  39 ', 'ARG', ' ', 0.4387864993731973, (-22.578999999999994, -15.458999999999994, -16.886)), ('A', '  71 ', 'ARG', ' ', 0.4407261800930561, (-27.24699999999999, -3.3899999999999992, -20.549)), ('A', '  72 ', 'ASP', ' ', 0.4107218805181083, (-26.810999999999996, -2.7119999999999993, -26.11)), ('A', '  73 ', 'ASP', ' ', 0.36578138543485117, (-21.697, -5.272999999999998, -25.601000000000006)), ('A', '  74 ', 'LEU', ' ', 0.4161847149995115, (-26.015, -9.069999999999997, -27.009)), ('B', '  39 ', 'ARG', ' ', 0.3333455665216849, (-49.05299999999999, 14.991999999999999, -4.976000000000002)), ('C', '  37 ', 'ILE', ' ', 0.34963112408978714, (-17.728, 3.6449999999999996, 27.712)), ('D', '   5 ', 'ILE', ' ', 0.2665480553968955, (-48.852, -14.325999999999997, 14.119)), ('D', '  37 ', 'ILE', ' ', 0.27114707958169265, (-34.01299999999999, -19.113999999999994, 28.287000000000006)), ('D', '  39 ', 'ARG', ' ', 0.43153008116017205, (-40.01299999999999, -24.411999999999995, 30.37900000000001))]
data['probe'] = [(' A  68  THR  O  ', ' A  72  ASP  HA ', -0.995, (-27.183, -5.893, -25.146)), (' D  39  ARG  O  ', ' D  43  PRO  HD2', -0.986, (-39.059, -24.733, 26.428)), (' A  50  ARG  HG3', ' A  59  ARG HH12', -0.968, (-31.469, -27.991, -9.317)), (' A 174  ASN  OXT', ' A 175  GLU  N  ', -0.939, (-7.106, -6.965, -7.5)), (' C 139  LEU HD22', ' D 114  MET  HE3', -0.882, (-23.389, -11.584, 25.096)), (' D  49  ALA  HB2', ' D  62  ILE HD11', -0.881, (-29.116, -29.008, 19.794)), (' C  49  ALA  HB2', ' C  62  ILE HD11', -0.878, (-24.307, 14.649, 26.911)), (' A  15  LEU HD22', ' A  48 BLEU HD11', -0.871, (-29.004, -19.866, -4.531)), (' C   2  LYS  NZ ', ' C   2  LYS  O  ', -0.86, (-3.014, 5.663, 8.272)), (' D  35  ILE HD13', ' D  97  VAL HG13', -0.858, (-25.059, -21.537, 24.931)), (' C 116  ALA  O  ', ' C 120  LEU HD13', -0.852, (-24.241, 1.157, 37.793)), (' C  35  ILE HD13', ' C  97  VAL HG13', -0.849, (-26.597, 6.326, 30.304)), (' A  35  ILE HD13', ' A  97  VAL HG13', -0.846, (-38.183, -14.656, -13.084)), (' B  35  ILE HD13', ' B  97  VAL HG13', -0.83, (-32.714, 13.809, -9.417)), (' B  54  ARG  NH2', ' S 143  HOH  O  ', -0.802, (-32.14, 22.358, 9.66)), (' D  34  LEU HD13', ' D  48 BLEU HD23', -0.799, (-30.057, -25.219, 18.348)), (' B  24  GLU  O  ', ' B  27  LYS  HE2', -0.798, (-20.494, 11.74, 3.525)), (' B  38  MET  HB2', ' B  66  ASP  HA ', -0.771, (-46.097, 14.325, -10.61)), (' A 115  ASP  OD1', ' S  68  HOH  O  ', -0.77, (-36.514, -1.017, -14.97)), (' A  38  MET  HB3', ' S 101  HOH  O  ', -0.758, (-27.083, -11.817, -19.33)), (' B  93  ILE  H  ', ' B  93  ILE HD12', -0.756, (-28.905, 15.402, -17.097)), (' A   5  ILE HD11', ' A 173  ILE  HB ', -0.753, (-13.271, -10.527, -2.728)), (' D  59  ARG  NH2', ' S 154  HOH  O  ', -0.747, (-32.687, -36.928, 16.986)), (' A  19  SER  OG ', ' A  48 ALEU HD12', -0.745, (-33.903, -22.65, -3.204)), (' C  22  ILE  CD1', ' C  48 BLEU HD21', -0.727, (-26.396, 11.419, 21.6)), (' A  79  GLU  N  ', ' A  79  GLU  OE1', -0.726, (-29.004, -8.87, -32.801)), (' D  93  ILE  H  ', ' D  93  ILE HD12', -0.72, (-17.324, -24.286, 29.877)), (' A  50  ARG  HG3', ' A  59  ARG  NH1', -0.714, (-32.318, -28.482, -9.704)), (' A  93  ILE  H  ', ' A  93  ILE HD12', -0.704, (-46.126, -14.398, -17.736)), (' D  22  ILE  CD1', ' D  48 BLEU HD21', -0.696, (-29.599, -23.127, 16.084)), (' D  39  ARG  O  ', ' D  43  PRO  CD ', -0.691, (-38.873, -25.737, 26.277)), (' C  40  ARG HH21', ' C 166  ASP  CG ', -0.684, (-6.416, 9.695, 20.543)), (' B  22  ILE HD12', ' B  48 BLEU HD11', -0.681, (-31.623, 15.172, 2.012)), (' C 131  LEU  C  ', ' C 132  ILE HD12', -0.677, (-17.143, 5.832, 14.844)), (' A  46  ASN  HA ', ' A  62  ILE  CD1', -0.665, (-32.579, -23.966, -11.713)), (' B  46  ASN  HA ', ' B  62  ILE  CD1', -0.662, (-37.097, 21.527, -2.295)), (' A  15  LEU HD22', ' A  48 BLEU  CD1', -0.66, (-28.52, -20.884, -4.825)), (' C  58  LYS  NZ ', ' S 132  HOH  O  ', -0.655, (-36.497, 18.613, 29.16)), (' D  34  LEU  C  ', ' D  35  ILE HD12', -0.649, (-26.256, -24.138, 24.506)), (' B  32 BLEU HD11', ' B  98  VAL  CG2', -0.646, (-29.551, 14.135, -3.273)), (' B  24  GLU  OE1', ' C  17  ARG  NE ', -0.644, (-25.225, 9.457, 9.592)), (' C  40  ARG  NE ', ' C 160  VAL  O  ', -0.64, (-8.672, 8.383, 19.678)), (' A   5  ILE HD13', ' A 150  VAL HG11', -0.638, (-15.5, -10.518, -1.314)), (' D  32 BLEU HD11', ' D  98  VAL  CG2', -0.638, (-24.382, -22.047, 18.359)), (' A  34  LEU  C  ', ' A  35  ILE HD12', -0.638, (-36.716, -17.54, -12.993)), (' B  19  SER  OG ', ' B  48 BLEU HD12', -0.636, (-32.928, 17.781, 4.511)), (' B  34  LEU  C  ', ' B  35  ILE HD12', -0.633, (-34.195, 16.353, -7.812)), (' A  32 BLEU HD12', ' A  33  VAL  N  ', -0.628, (-40.818, -17.92, -9.051)), (' C  34  LEU  C  ', ' C  35  ILE HD12', -0.625, (-25.51, 9.247, 29.805)), (' D  32 BLEU HD11', ' D  98  VAL HG23', -0.618, (-24.158, -22.224, 18.827)), (' D  29  ILE  HA ', ' D  32 ALEU  HG ', -0.612, (-21.406, -25.017, 15.717)), (' B  32 BLEU HD11', ' B  98  VAL HG23', -0.61, (-28.958, 13.817, -3.794)), (' C 132  ILE  N  ', ' C 132  ILE HD12', -0.605, (-16.935, 5.138, 15.058)), (' A  22  ILE  CD1', ' A  48 ALEU HD21', -0.605, (-34.547, -18.487, -4.824)), (' B  49  ALA  CB ', ' B  62  ILE HD11', -0.598, (-35.002, 21.443, -1.934)), (' C  34  LEU  HB2', ' C  62  ILE HD12', -0.595, (-24.247, 13.074, 27.713)), (' A  49  ALA  CB ', ' A  62  ILE HD11', -0.591, (-34.381, -24.033, -10.319)), (' D  34  LEU  HB2', ' D  62  ILE HD12', -0.581, (-29.0, -26.674, 21.685)), (' C  40  ARG  HB3', ' C 162  LEU HD12', -0.577, (-12.799, 10.496, 21.828)), (' B   1  TYR  CD2', ' B   1  TYR  N  ', -0.574, (-54.151, 0.243, 19.793)), (' A  19  SER  OG ', ' A  48 ALEU  CD1', -0.568, (-33.102, -22.086, -3.18)), (' C   2  LYS  HE2', ' C 172  ILE HG21', -0.566, (-3.563, 4.946, 10.745)), (' C 131  LEU  HG ', ' C 132  ILE HD12', -0.566, (-16.626, 6.236, 14.881)), (' C  40  ARG  NH2', ' C 166  ASP  OD1', -0.561, (-5.845, 8.655, 21.345)), (' D 166  ASP  O  ', ' D 167  ASN  HB2', -0.557, (-51.598, -28.066, 24.589)), (' B  49  ALA  HB2', ' B  62  ILE HD11', -0.557, (-34.907, 20.96, -2.119)), (' C  22  ILE HD13', ' C  48 BLEU HD21', -0.557, (-27.175, 10.782, 22.185)), (' A  49  ALA  HB2', ' A  62  ILE HD11', -0.551, (-34.375, -23.79, -10.26)), (' C 143  PRO  HB2', ' C 146  VAL HG22', -0.549, (-24.578, 1.216, 16.483)), (' B  54  ARG  CZ ', ' S 143  HOH  O  ', -0.547, (-31.762, 22.752, 9.714)), (' A  38  MET  HG2', ' S  93  HOH  O  ', -0.543, (-25.493, -12.895, -21.231)), (' D   1  TYR  CD2', ' D 174  ASN  OXT', -0.542, (-55.318, -9.647, 22.767)), (' A  32 BLEU  CD1', ' A  98  VAL HG23', -0.542, (-39.471, -16.858, -7.136)), (' C  40  ARG  CZ ', ' C 160  VAL  O  ', -0.542, (-8.332, 7.45, 20.263)), (' B  93  ILE HG13', ' B 121  GLY  HA3', -0.541, (-28.76, 13.242, -18.804)), (' B  29  ILE HG22', ' B  32 BLEU HD23', -0.54, (-26.599, 17.473, -1.409)), (' C 166  ASP  O  ', ' C 167  ASN  HB2', -0.538, (-3.088, 14.762, 19.344)), (' D  22  ILE HD12', ' D  48 BLEU HD11', -0.538, (-30.276, -23.569, 14.795)), (' A  68  THR  O  ', ' A  72  ASP  N  ', -0.537, (-27.261, -4.684, -24.09)), (' C  22  ILE HD12', ' C  48 BLEU HD11', -0.536, (-27.068, 11.616, 20.115)), (' C  34  LEU  HB2', ' C  62  ILE  CD1', -0.535, (-24.709, 13.315, 27.724)), (' C  40  ARG  HB3', ' C 162  LEU  CD1', -0.532, (-13.176, 10.18, 21.374)), (' A  38  MET  HB2', ' A  66  ASP  HA ', -0.532, (-28.022, -13.44, -20.187)), (' A  93  ILE HG13', ' A 121  GLY  HA3', -0.531, (-46.374, -11.077, -18.614)), (' A 151  PRO  HG2', ' C 151  PRO  HB3', -0.524, (-16.804, -4.573, 5.556)), (' C  19  SER  OG ', ' C  52  ILE HG13', -0.516, (-27.538, 15.554, 20.433)), (' C  40  ARG  NE ', ' C 166  ASP  OD2', -0.513, (-8.065, 9.34, 20.901)), (' A  17  ARG  HD3', ' D  21  GLU  HG2', -0.511, (-29.55, -18.143, 7.179)), (' A 172  ILE HG22', ' A 173  ILE  N  ', -0.51, (-10.71, -12.618, -5.243)), (' B  17  ARG  HD3', ' C  21  GLU  HG2', -0.51, (-31.758, 9.4, 12.575)), (' B  24  GLU  O  ', ' B  27  LYS  CE ', -0.508, (-20.369, 10.963, 4.004)), (' B  29  ILE HG22', ' B  32 BLEU  CD2', -0.507, (-26.528, 16.89, -1.307)), (' C 156  GLU  C  ', ' C 157  ILE HD12', -0.503, (-5.689, -4.413, 14.014)), (' C  38  MET  O  ', ' C  39  ARG  HG2', -0.502, (-12.458, 4.095, 28.08)), (' C 157  ILE  N  ', ' C 157  ILE HD12', -0.498, (-6.155, -3.773, 13.993)), (' A  93  ILE  CD1', ' A  93  ILE  H  ', -0.494, (-46.259, -14.185, -17.727)), (' D  32 BLEU HD11', ' D  98  VAL HG21', -0.494, (-25.215, -22.033, 18.068)), (' D  93  ILE HG13', ' D 121  GLY  HA3', -0.494, (-17.093, -21.241, 31.472)), (' D  36  GLY  HA3', ' D  41  GLY  O  ', -0.493, (-33.812, -23.548, 24.938)), (' D  32 BLEU  CD1', ' D  98  VAL HG23', -0.493, (-23.955, -22.054, 18.834)), (' A  32 BLEU HD11', ' A  98  VAL HG23', -0.492, (-39.226, -16.944, -7.14)), (' A  48 ALEU HD11', ' A  52  ILE HD11', -0.491, (-35.092, -21.034, -3.846)), (' C  61  PRO  O  ', ' C  62  ILE HD13', -0.489, (-25.573, 13.764, 29.258)), (' A  40  ARG  HB3', ' A 162  LEU HD12', -0.487, (-22.113, -19.071, -11.449)), (' A  50  ARG  CG ', ' A  59  ARG  NH1', -0.487, (-32.365, -28.832, -8.956)), (' D  96  ILE HD11', ' D 124  LYS  HD2', -0.486, (-16.488, -19.446, 18.385)), (' A  15  LEU  CD2', ' A  48 BLEU HD11', -0.485, (-28.271, -19.706, -3.861)), (' D  32 ALEU HD22', ' D  96  ILE  HB ', -0.483, (-20.675, -21.817, 18.718)), (' B  22  ILE HD12', ' B  48 BLEU  CD1', -0.477, (-32.561, 15.252, 2.409)), (' B  34  LEU  CD2', ' B  48 BLEU HD23', -0.477, (-34.0, 17.009, -1.066)), (' C   2  LYS  HA ', ' C 173  ILE  O  ', -0.471, (-3.936, 1.707, 8.895)), (' B   5  ILE HD11', ' B 173  ILE HD12', -0.468, (-50.363, 3.943, 11.939)), (' D  34  LEU HD12', ' D  62  ILE  CD1', -0.466, (-29.294, -27.579, 20.556)), (' D  22  ILE HD13', ' D  48 BLEU HD21', -0.466, (-28.826, -23.308, 16.581)), (' C  46  ASN  OD1', ' C  62  ILE HG21', -0.463, (-19.999, 14.5, 28.497)), (' C 172  ILE  CG2', ' C 173  ILE  N  ', -0.46, (-6.108, 4.162, 10.503)), (' C  19  SER  HA ', ' C  48 BLEU HD11', -0.459, (-27.172, 12.862, 19.431)), (' C 172  ILE HG22', ' C 173  ILE  N  ', -0.459, (-6.008, 3.921, 11.001)), (' C  34  LEU  CD2', ' C  48 BLEU HD23', -0.459, (-25.46, 12.411, 24.375)), (' D  46  ASN  OD1', ' D  62  ILE HG21', -0.458, (-32.38, -29.284, 23.927)), (' C 131  LEU  HG ', ' C 132  ILE  CD1', -0.458, (-16.43, 6.859, 14.747)), (' A  32 BLEU HD12', ' A  33 BVAL  H  ', -0.456, (-41.072, -17.429, -9.109)), (' C 133  ASP  HB3', ' C 149  ASN HD22', -0.455, (-20.739, -0.48, 12.644)), (' D  35  ILE  N  ', ' D  35  ILE HD12', -0.455, (-27.054, -23.572, 24.689)), (' D  38  MET  O  ', ' D  39  ARG  HG2', -0.455, (-40.104, -21.833, 30.171)), (' B  32 BLEU HD11', ' B  98  VAL HG21', -0.452, (-29.594, 13.579, -2.628)), (' A  46  ASN  OD1', ' A  62  ILE HG21', -0.451, (-31.914, -22.845, -13.363)), (' D  34  LEU  HB2', ' D  62  ILE  CD1', -0.45, (-28.556, -27.314, 21.963)), (' D  32 ALEU  CD2', ' D  96  ILE  HB ', -0.448, (-20.329, -22.383, 18.273)), (' A  48 ALEU  O  ', ' A  48 ALEU HD12', -0.443, (-33.777, -23.35, -4.213)), (' A  67  ILE  HA ', ' A  67  ILE HD12', -0.442, (-30.701, -8.483, -19.373)), (' B  35  ILE  N  ', ' B  35  ILE HD12', -0.44, (-34.422, 15.725, -7.702)), (' D  34  LEU  CD1', ' D  48 BLEU HD23', -0.44, (-29.556, -25.466, 18.711)), (' A  77  LYS  HD3', ' S  86  HOH  O  ', -0.438, (-20.922, -11.39, -36.502)), (' B  32 BLEU  CD1', ' B  98  VAL HG23', -0.437, (-28.963, 13.835, -4.048)), (' C  35  ILE  N  ', ' C  35  ILE HD12', -0.435, (-24.793, 8.754, 29.911)), (' A 122  ARG  NH1', ' S  61  HOH  O  ', -0.434, (-49.726, -8.222, -11.233)), (' D 105  TYR  OH ', ' D 154  LYS  HD2', -0.433, (-44.472, -3.278, 25.374)), (' B  46  ASN  OD1', ' B  62  ILE HG21', -0.431, (-38.296, 21.086, -4.08)), (' A 142  ARG  NH1', ' S  29  HOH  O  ', -0.428, (-27.146, -3.487, -2.297)), (' A  79  GLU  CD ', ' A  79  GLU  N  ', -0.427, (-28.63, -8.738, -31.983)), (' B  93  ILE  CD1', ' B  93  ILE  H  ', -0.427, (-28.482, 15.646, -17.087)), (' C   2  LYS  CE ', ' C 172  ILE HG21', -0.426, (-3.092, 4.949, 10.655)), (' D  20  HIS  HE1', ' S  88  HOH  O  ', -0.423, (-32.587, -28.258, 5.964)), (' A  35  ILE  N  ', ' A  35  ILE HD12', -0.423, (-36.522, -16.809, -12.711)), (' B  91 BASP  OD2', ' B  93  ILE HD13', -0.423, (-28.115, 17.582, -17.988)), (' A   6  MET  SD ', ' A 132  ILE HD11', -0.418, (-19.959, -15.196, -1.374)), (' B  49  ALA  HB3', ' B  62  ILE HD11', -0.418, (-35.118, 21.706, -1.112)), (' B  32 ALEU HD22', ' B  96  ILE  HB ', -0.418, (-25.243, 14.255, -5.513)), (' C  40  ARG  CD ', ' C 160  VAL  O  ', -0.417, (-9.549, 8.16, 19.811)), (' A 170  LYS  HD2', ' A 172  ILE HD11', -0.415, (-11.05, -19.112, -4.751)), (' A  49  ALA  HB3', ' A  62  ILE HD11', -0.415, (-33.9, -24.684, -9.91)), (' C   2  LYS  HA ', ' C   2  LYS  HD2', -0.414, (-3.138, 2.73, 9.4)), (' A  59  ARG  NE ', ' S  91  HOH  O  ', -0.413, (-35.912, -26.926, -12.317)), (' D  61  PRO  O  ', ' D  62  ILE HD13', -0.413, (-26.896, -28.366, 22.554)), (' C 150  VAL  HA ', ' C 151  PRO  HD2', -0.412, (-16.317, 0.216, 7.491)), (' B  67  ILE  HA ', ' B  67  ILE HD13', -0.411, (-43.802, 9.64, -13.398)), (' C  38  MET  CB ', ' C  66  ASP  HA ', -0.411, (-14.09, 4.56, 32.308)), (' A  46  ASN  HA ', ' A  62  ILE HD12', -0.409, (-32.616, -24.221, -11.725))]
handle_read_draw_probe_dots_unformatted("apo-ds1_molprobity_37_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
